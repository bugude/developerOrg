<apex:component controller="DragDropToCloud.DragDropComponentController" id="componentId" allowDML="true">
    <apex:includeScript value="{!URLFOR($Resource.DragDropToCloud__DNDJquery, 'js/jquery-1.7.1.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.DragDropToCloud__DNDJquery, 'js/jquery-ui-1.8.18.custom.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.DragDropToCloud__DNDJquery, 'js/jquery.easy-confirm-dialog.js')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.DragDropToCloud__DNDJquery, 'css/FileUploadCSS.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.DragDropToCloud__DNDJquery, 'css/chatterCore.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.DragDropToCloud__DNDJquery, 'css/ui-lightness/jquery-ui-1.8.18.custom.css')}"/>
    <apex:includeScript value="{!$Resource.DragDropToCloud__AmazonS3SDKJquery}"/>
    <!-----**********Doxcument Upload Script***********----->
    <script> 
        var j$ = jQuery.noConflict();
        var byteChunkArray; 
        var files;
        var currentFile;
        var $upload;
        var CHUNK_SIZE = 180000; //Must be evenly divisible by 3, if not, data corruption will occur
        var VIEW_URL = '/servlet/servlet.FileDownload?file=';
        var BatchSize = 0;
        
        //Executes when start Upload button is selected
        function prepareFileUploads(evt){
             
            evt.preventDefault();
            j$('.uploadBox').show();

            //Get the file(s) from the input field
            files = evt.dataTransfer.files; // FileList object.
        
            //Only proceed if there are files selected
            if(files.length == 0){
                alert('Please select a file!');
                return; //end function
            }
            var uploadMarkup = '';
            for(i = 0; i < files.length; i++){
                //Determine file display size
                if(files[i].size < 1000000){
                    var displaySize = Math.floor(files[i].size/1000) + 'K';
                }else{
                    var displaySize  = Math.round((files[i].size / 1000000)*10)/10 + 'MB';
                }
        
                //For each file being uploaded create a div to represent that file, includes file size, status bar, etc. data-Status tracks status of upload
                uploadMarkup += '<div class="upload" style="padding: 10px;width:600px;" data-status="pending" data-index="'+i+'">'; //index used to correspond these upload boxes to records in the files array
                uploadMarkup += '<span style="width:600px;display:inline-block;">';
                uploadMarkup += '<span class="fileName"><span class="name" style="max-width: 350px;" id="'+files[i].name+'">'+ files[i].name + '</span>&nbsp;('+ displaySize+ ')</span>';
                uploadMarkup += '<span style="width:250px;position:fixed;"><span class="statusBarPercent"></span></span>';
                uploadMarkup += '<span class="percentComplete"><progress>Uploading...</progress></span>';
                uploadMarkup += '</span>';
                uploadMarkup += '<div class="clear"/>';
                uploadMarkup += '</div>';
            }
            //Empty earlier contents
            j$('.uploadBox').html('');
            //Add markup to the upload box
            j$('.uploadBox').append(uploadMarkup);
            j$('.uploadBox').dialog({
                autoOpen: false,
                draggable: false,
                modal: true,
                resizable: false,
                width: 650,
                height: 500,
                buttons:{"Cancel Remaining Uploads": function(){},"Done":function(){j$(this).dialog("close" );uploadComplete();}},
                open: function(event, ui) { jQuery('.ui-dialog-titlebar-close').hide(); }         
            });
            
            j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[1]).hide();
            j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[0]).easyconfirm();                                 
            j$('.uploadBox').dialog('open');        
            j$(".ui-dialog-title").html('Uploading Files ...');
            checkForUploads();
        }
        
        function checkForUploads(){
            AWS.config.update({accessKeyId: '{!JSENCODE(AccessKey)}', secretAccessKey: '{!JSENCODE(SecretKey)}'}); 
            
            //Get div of the first matching upload element that is 'pending', if none, all uploads are complete
            $upload = j$(".upload:first[data-status='pending']");
            if($upload.length != 0){
                    //Based on index of the div, get correct file from files array
                    if(files!=null){
                        currentFile = files[$upload.attr('data-index')];
                              var bucket = new AWS.S3({params: {Bucket:'{!JSENCODE(bucketName)}'}});
                              var button = document.getElementById('upload-button');
                              var results = document.getElementById('results');
                              var file = currentFile;
                              console.log('Actual File Name-->'+file.name);
                                if (file) {
                                 results.innerHTML = '';
                                 var finalFileName;
                                 Visualforce.remoting.Manager.invokeAction(
                                            '{!$RemoteAction.DragDropComponentController.fetchFileNameWithVersionRemote}',
                                            file.name, '{!JSENCODE(fieldapiname)}','{!JSENCODE(parent_id)}',file.name,
                                            function(result, event){
                                                finalFileName = result;
                                                console.log('Versioned File Name-->'+finalFileName);
                                                var params = {Key: '{!JSENCODE(objectfolderName)}/'+'{!JSENCODE(folderName)}/'+finalFileName, ContentType: file.type, Body: file, ACL: 'private'};
                                                  bucket.putObject(params, function (err, data) {
                                                    var bukName = '{!JSENCODE(bucketName)}';
                                                    var fieldApi = '{!JSENCODE(fieldapiname)}';
                                                    var ParentId = '{!JSENCODE(parent_id)}';
                                                    var folderName1 = '{!JSENCODE(folderName)}';
                                                    var folderName2 = '{!JSENCODE(objectfolderName)}';
                                                    console.log('--> bucketName: '+bukName);
                                                    console.log('--> fieldapiname: '+fieldApi);
                                                    console.log('--> parent_id: '+ParentId);
                                                    console.log('--> folderName1: '+folderName1);
                                                    console.log('--> objectfolderName: '+folderName2);
                                                    results.innerHTML = err ? '<span style="color:red;font-weight:bold">Oops!! There is an ERROR!</span>' : 'Upload Complete!';
                                                    //This file has completed, all byte chunks have been uploaded, set status on the div to complete
                                                    if(err == null){
                                                        console.log('No Error. This file has completed, all byte chunks have been uploaded.');
                                                        $upload.attr('data-status','complete');
                                                        $upload.find(".percentComplete").html('<font style="color:#008040;">Completed</font>');
                                                        $upload.find(".statusBarPercent").hide();
                                                        //readme_v2.txt--00D90000000wkg3EAA--003900000115kgsaa2--ReadMe.txt--003-contact
                                                        console.log(finalFileName+'--'+bukName+'--'+folderName1+'--'+file.name+'--'+folderName2);
                                                        Visualforce.remoting.Manager.invokeAction(
                                                            '{!$RemoteAction.DragDropComponentController.CreateCloudDocuments}',
                                                            finalFileName, bukName, fieldApi, ParentId, folderName1,file.name, folderName2,
                                                            function(result, event){
                                                                console.log('PreviewLink--> '+result);
                                                                document.getElementById(file.name).innerHTML = '<a src="result" target="_blank" href="'+result+'">'+file.name+'</a>';
                                                                //$upload.find("#"+filenameIdSelector).html('<a src="result" >A-->file.name</a>');
                                                            }, 
                                                            {escape: true}
                                                        );
                                                        checkForUploads();
                                                    }
                                                    else{
                                                        console.log(err);
                                                        var xhr = new XMLHttpRequest();
                                                        var headers = xhr.getAllResponseHeaders().toLowerCase();
                                                        console.log('--> Header: '+headers);
                                                        $upload.attr('data-status','pending');
                                                        $upload.find(".percentComplete").html('<font style="color:#ff0000;">Error: '+err+'</font>');
                                                        $upload.find(".statusBarPercent").hide();
                                                    }
                                                  });
                                            }, 
                                            {escape: true}
                                        );
                                } 
                                else {
                                  results.innerHTML = 'Nothing to upload.';
                                }
                            }
                     else {              
                        performUploadCompleteActions();
                     }
               }
               else {           
                      performUploadCompleteActions();
            }
        }
        
        function performUploadCompleteActions(){
            j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[0]).hide();
            j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[1]).show();
            j$(".ui-dialog-title").html('Upload Completed ...');
            uploadComplete();
        }
        
        function performUploadCancelActions(){
            files = null;       
            
            j$(".upload:[data-status='incomplete']").find(".percentComplete").html('<font style="color:#C00000;;">Canceled</font>');
            j$(".upload:[data-status='incomplete']").find(".statusBarPercent").hide();
            j$(".upload:[data-status='incomplete']").attr('data-status','complete');        
            
            j$(".upload:[data-status='pending']").each(function() {j$(this).attr('data-status','complete');j$(this).find(".percentComplete").html('<font style="color:#C00000;;">Canceled</font>');});
            j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[0]).hide();
            j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[1]).show();
            j$(".ui-dialog-title").html('Upload Cancelled ...');
            uploadComplete();
        }   
        
        
    </script>
    <!--**************************************************-->
    <apex:form >
        <apex:pageMessages />
        <apex:outputPanel rendered="{!AND($CurrentPage.Parameters.parent_id != '', $CurrentPage.Parameters.parent_id != null)}">
            <apex:pageBlock title="Drag & Drop Files" rendered="{!!isAmazonEnabled}">
                <apex:pageBlockButtons location="bottom">
                    <apex:commandButton value="Back" action="{!cancel}" />
                </apex:pageBlockButtons>
                <p>To Upload Files, you will need to setup Amazon Credentials. Please contact your system administrator to setup same.</p>
            </apex:pageBlock>
        </apex:outputPanel>
        <apex:outputPanel rendered="{!AND($CurrentPage.Parameters.parent_id != '', $CurrentPage.Parameters.parent_id != null)}">
            <apex:pageBlock title="Drag & Drop Files" rendered="{!isAmazonEnabled}">
                <div id="drop_zone">Drag and Drop files into this outlined area to upload them to Amazon S3.</div>
                <div class="uploadBox"  style="border: 0px solid #F8f8f8;" ></div>
                <br/> 
                <div id="results" style="font-weight:bold;font-size: 20px;color:#01DF01;"></div>
                <br/>
                <div id="dragAndDropTargetDiv" class="dragAndDropTargetDiv" style="display: none;">
                    <div class="dragAndDropTargetImg"></div>
                    <div class="dragAndDropTargetTextDiv">Drag and Drop Files Here</div>
                </div>
                <script>
                    function handleDragOver(evt)
                    {
                        evt.stopPropagation();
                        evt.preventDefault();
                        evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
                    }
                    
                    if(!window.FileReader) {
                        alert("This browser doesn't support Drag & Drop of Files. Please try using Google Chrome or Mozilla Firefox to use this application. Redirecting you back to standard way of uploading documents.");
                        window.location.href = '/p/doc/DocumentUploadUi?retURL=%2F015%2Fo';
                    }
                    else {                
                        // Setup the dnd listeners.
                        var dropZone = document.getElementById('drop_zone');
                        try{
                            var f = window.FileReader;
                            dropZone.addEventListener('dragover', handleDragOver, false);
                            dropZone.addEventListener('drop', prepareFileUploads, false);
                        }
                        catch(err) {
                            alert("This browser doesn't support Drag & Drop of Files. Please try using Google Chrome or Mozilla Firefox to use this application. Redirecting you back to standard way of uploading attachments. (Technical Details : "+err+")");
                            window.location.href = '/p/doc/DocumentUploadUi?retURL=%2F015%2Fo';
                        }
                    }
                </script>  
                <style>
                    .bPageBlock {
                    width:100%;
                    }
                </style>
                <apex:actionFunction name="uploadComplete" action="{!uploadComplete}" rerender="relatedListOP"/>
                <apex:pageBlockButtons location="bottom">
                    <apex:commandButton title="Back" value="Back" action="{!cancel}" />
                </apex:pageBlockButtons>                      
            </apex:pageBlock>
        </apex:outputPanel>
    </apex:form>
</apex:component>